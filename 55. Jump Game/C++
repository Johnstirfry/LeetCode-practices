class Solution {
public:
    // brute force dp
    bool canJump(vector<int>& nums) {
        if (nums.size() <= 1) return true;
        
        bool dp[nums.size()];
        for (int i = 0; i < nums.size(); i++){
            dp[i] = 0;
        }
        dp[nums.size()-1] = 1;
        
        for (int i = nums.size()-2; i >= 0; i--){
            if (nums[i] == 0) continue;
            if (nums[i] >= nums.size() - i - 1) dp[i] = 1;
            else{
                for (int j = nums[i]; j >= 0; j--){
                    if (dp[i+j]){
                        dp[i] = 1;
                        break;
                    }
                }
            }
        }
        return dp[0];
    }
    // Linear solution
    bool canJump(vector<int>& nums){
        int m = 0;
        for (int i = 0; i < nums.size(); i++){
            if (i > m) return false;
            m = max(m, i+nums[i]);
        }
        return true;
    }
};
