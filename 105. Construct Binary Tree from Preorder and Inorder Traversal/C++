/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int idx = 0;
        map<int, int> inorder_map;
        for(int i = 0; i < inorder.size(); i++){
            inorder_map[inorder[i]] = i;
        }
        return build(preorder, inorder_map, 0, preorder.size()-1, idx);
    }
    
    TreeNode* build(vector<int>& preorder, map<int, int>& inorder, int l, int r, int& idx){
        if(l > r) return nullptr;
        
        TreeNode* root = new TreeNode(preorder[idx]);
        idx++;
        
        root->left = build(preorder, inorder, l, inorder[root->val]-1, idx);
        root->right = build(preorder, inorder, inorder[root->val]+1, r, idx);
        
        return root;
    }
};
