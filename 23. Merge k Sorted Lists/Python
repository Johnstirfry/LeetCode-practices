# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        # 注意input是linked list，原本以為是list
        # Divide and conquer solution
        amount = len(lists)
        interval = 1
        while interval < amount:
            for i in range(0, amount - interval, interval*2):
                lists[i] = self.merge2Lists(lists[i], lists[i+interval])
            interval *= 2
        return lists[0] if amount > 0 else None
        
    def merge2Lists(self, l, r):
        root = node = ListNode()
        
        while l != None and r != None:
            node.next = ListNode()
            node = node.next
            if l.val <= r.val:
                node.val = l.val
                l = l.next
            elif l.val > r.val:
                node.val = r.val
                r = r.next
        if l != None:
            node.next = l
        elif r != None:
            node.next = r
        
        return root.next
